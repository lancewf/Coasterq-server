<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';

include_once 'creole/util/Clob.php';
include_once 'creole/util/Blob.php';


include_once 'propel/util/Criteria.php';

include_once 'persistence/RidePeer.php';

/**
 * Base class that represents a row from the 'ride' table.
 *
 * a ride in the park
 *
 * This class was autogenerated by Propel on:
 *
 * Sun May 17 12:03:10 2009
 *
 * @package    persistence.om
 */
abstract class BaseRide extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RidePeer
	 */
	protected static $peer;


	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;


	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;


	/**
	 * The value for the land_id field.
	 * @var        int
	 */
	protected $land_id;


	/**
	 * The value for the height field.
	 * @var        int
	 */
	protected $height;


	/**
	 * The value for the popularitylevel field.
	 * @var        int
	 */
	protected $popularitylevel;


	/**
	 * The value for the currentwaittime field.
	 * @var        int
	 */
	protected $currentwaittime;


	/**
	 * The value for the fastpass field.
	 * @var        boolean
	 */
	protected $fastpass;


	/**
	 * The value for the averagewaittime field.
	 * @var        int
	 */
	protected $averagewaittime;


	/**
	 * The value for the nextshortestwaittime field.
	 * @var        int
	 */
	protected $nextshortestwaittime;


	/**
	 * The value for the nextshortestdatetime field.
	 * @var        int
	 */
	protected $nextshortestdatetime;


	/**
	 * The value for the lastupdate field.
	 * @var        int
	 */
	protected $lastupdate;


	/**
	 * The value for the singleline field.
	 * @var        boolean
	 */
	protected $singleline;


	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;


	/**
	 * The value for the is_ride_permently_closed field.
	 * @var        boolean
	 */
	protected $is_ride_permently_closed;

	/**
	 * @var        Land
	 */
	protected $aLand;

	/**
	 * Collection to store aggregation of collItineraryRides.
	 * @var        array
	 */
	protected $collItineraryRides;

	/**
	 * The criteria used to select the current contents of collItineraryRides.
	 * @var        Criteria
	 */
	protected $lastItineraryRideCriteria = null;

	/**
	 * Collection to store aggregation of collRideWaits.
	 * @var        array
	 */
	protected $collRideWaits;

	/**
	 * The criteria used to select the current contents of collRideWaits.
	 * @var        Criteria
	 */
	protected $lastRideWaitCriteria = null;

	/**
	 * Collection to store aggregation of collRideClosures.
	 * @var        array
	 */
	protected $collRideClosures;

	/**
	 * The criteria used to select the current contents of collRideClosures.
	 * @var        Criteria
	 */
	protected $lastRideClosureCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * ride Id
	 * @return     int
	 */
	public function getId()
	{

		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * Land Name
	 * @return     string
	 */
	public function getName()
	{

		return $this->name;
	}

	/**
	 * Get the [land_id] column value.
	 * Foreign Key for Land
	 * @return     int
	 */
	public function getLandId()
	{

		return $this->land_id;
	}

	/**
	 * Get the [height] column value.
	 * Height restriction
	 * @return     int
	 */
	public function getHeight()
	{

		return $this->height;
	}

	/**
	 * Get the [popularitylevel] column value.
	 * The popularity level of the ride compared to other rides in the same park
	 * @return     int
	 */
	public function getPopularitylevel()
	{

		return $this->popularitylevel;
	}

	/**
	 * Get the [currentwaittime] column value.
	 * The current wait time of the ride. This value is updated by the server at most very 5 minutes
	 * @return     int
	 */
	public function getCurrentwaittime()
	{

		return $this->currentwaittime;
	}

	/**
	 * Get the [fastpass] column value.
	 * Does the ride have fast pass?
	 * @return     boolean
	 */
	public function getFastpass()
	{

		return $this->fastpass;
	}

	/**
	 * Get the [averagewaittime] column value.
	 * The average wait time
	 * @return     int
	 */
	public function getAveragewaittime()
	{

		return $this->averagewaittime;
	}

	/**
	 * Get the [nextshortestwaittime] column value.
	 * the next shortest wait time
	 * @return     int
	 */
	public function getNextshortestwaittime()
	{

		return $this->nextshortestwaittime;
	}

	/**
	 * Get the [optionally formatted] [nextshortestdatetime] column value.
	 * the next shortest wait time date
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the integer unix timestamp will be returned.
	 * @return     mixed Formatted date/time value as string or integer unix timestamp (if format is NULL).
	 * @throws     PropelException - if unable to convert the date/time to timestamp.
	 */
	public function getNextshortestdatetime($format = 'Y-m-d H:i:s')
	{

		if ($this->nextshortestdatetime === null || $this->nextshortestdatetime === '') {
			return null;
		} elseif (!is_int($this->nextshortestdatetime)) {
			// a non-timestamp value was set externally, so we convert it
			$ts = strtotime($this->nextshortestdatetime);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse value of [nextshortestdatetime] as date/time value: " . var_export($this->nextshortestdatetime, true));
			}
		} else {
			$ts = $this->nextshortestdatetime;
		}
		if ($format === null) {
			return $ts;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $ts);
		} else {
			return date($format, $ts);
		}
	}

	/**
	 * Get the [lastupdate] column value.
	 * Last time the current wait time, next shortest wait time, next shortest wait date, and average wait time was updated
	 * @return     int
	 */
	public function getLastupdate()
	{

		return $this->lastupdate;
	}

	/**
	 * Get the [singleline] column value.
	 * Does the ride have a singleLine?
	 * @return     boolean
	 */
	public function getSingleline()
	{

		return $this->singleline;
	}

	/**
	 * Get the [description] column value.
	 * Description of the ride
	 * @return     string
	 */
	public function getDescription()
	{

		return $this->description;
	}

	/**
	 * Get the [is_ride_permently_closed] column value.
	 * Is the ride permently closed
	 * @return     boolean
	 */
	public function getIsRidePermentlyClosed()
	{

		return $this->is_ride_permently_closed;
	}

	/**
	 * Set the value of [id] column.
	 * ride Id
	 * @param      int $v new value
	 * @return     void
	 */
	public function setId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RidePeer::ID;
		}

	} // setId()

	/**
	 * Set the value of [name] column.
	 * Land Name
	 * @param      string $v new value
	 * @return     void
	 */
	public function setName($v)
	{

		// Since the native PHP type for this column is string,
		// we will cast the input to a string (if it is not).
		if ($v !== null && !is_string($v)) {
			$v = (string) $v; 
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = RidePeer::NAME;
		}

	} // setName()

	/**
	 * Set the value of [land_id] column.
	 * Foreign Key for Land
	 * @param      int $v new value
	 * @return     void
	 */
	public function setLandId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->land_id !== $v) {
			$this->land_id = $v;
			$this->modifiedColumns[] = RidePeer::LAND_ID;
		}

		if ($this->aLand !== null && $this->aLand->getId() !== $v) {
			$this->aLand = null;
		}

	} // setLandId()

	/**
	 * Set the value of [height] column.
	 * Height restriction
	 * @param      int $v new value
	 * @return     void
	 */
	public function setHeight($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->height !== $v) {
			$this->height = $v;
			$this->modifiedColumns[] = RidePeer::HEIGHT;
		}

	} // setHeight()

	/**
	 * Set the value of [popularitylevel] column.
	 * The popularity level of the ride compared to other rides in the same park
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPopularitylevel($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->popularitylevel !== $v) {
			$this->popularitylevel = $v;
			$this->modifiedColumns[] = RidePeer::POPULARITYLEVEL;
		}

	} // setPopularitylevel()

	/**
	 * Set the value of [currentwaittime] column.
	 * The current wait time of the ride. This value is updated by the server at most very 5 minutes
	 * @param      int $v new value
	 * @return     void
	 */
	public function setCurrentwaittime($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->currentwaittime !== $v) {
			$this->currentwaittime = $v;
			$this->modifiedColumns[] = RidePeer::CURRENTWAITTIME;
		}

	} // setCurrentwaittime()

	/**
	 * Set the value of [fastpass] column.
	 * Does the ride have fast pass?
	 * @param      boolean $v new value
	 * @return     void
	 */
	public function setFastpass($v)
	{

		if ($this->fastpass !== $v) {
			$this->fastpass = $v;
			$this->modifiedColumns[] = RidePeer::FASTPASS;
		}

	} // setFastpass()

	/**
	 * Set the value of [averagewaittime] column.
	 * The average wait time
	 * @param      int $v new value
	 * @return     void
	 */
	public function setAveragewaittime($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->averagewaittime !== $v) {
			$this->averagewaittime = $v;
			$this->modifiedColumns[] = RidePeer::AVERAGEWAITTIME;
		}

	} // setAveragewaittime()

	/**
	 * Set the value of [nextshortestwaittime] column.
	 * the next shortest wait time
	 * @param      int $v new value
	 * @return     void
	 */
	public function setNextshortestwaittime($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->nextshortestwaittime !== $v) {
			$this->nextshortestwaittime = $v;
			$this->modifiedColumns[] = RidePeer::NEXTSHORTESTWAITTIME;
		}

	} // setNextshortestwaittime()

	/**
	 * Set the value of [nextshortestdatetime] column.
	 * the next shortest wait time date
	 * @param      int $v new value
	 * @return     void
	 */
	public function setNextshortestdatetime($v)
	{

		if ($v !== null && !is_int($v)) {
			$ts = strtotime($v);
			if ($ts === -1 || $ts === false) { // in PHP 5.1 return value changes to FALSE
				throw new PropelException("Unable to parse date/time value for [nextshortestdatetime] from input: " . var_export($v, true));
			}
		} else {
			$ts = $v;
		}
		if ($this->nextshortestdatetime !== $ts) {
			$this->nextshortestdatetime = $ts;
			$this->modifiedColumns[] = RidePeer::NEXTSHORTESTDATETIME;
		}

	} // setNextshortestdatetime()

	/**
	 * Set the value of [lastupdate] column.
	 * Last time the current wait time, next shortest wait time, next shortest wait date, and average wait time was updated
	 * @param      int $v new value
	 * @return     void
	 */
	public function setLastupdate($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->lastupdate !== $v) {
			$this->lastupdate = $v;
			$this->modifiedColumns[] = RidePeer::LASTUPDATE;
		}

	} // setLastupdate()

	/**
	 * Set the value of [singleline] column.
	 * Does the ride have a singleLine?
	 * @param      boolean $v new value
	 * @return     void
	 */
	public function setSingleline($v)
	{

		if ($this->singleline !== $v) {
			$this->singleline = $v;
			$this->modifiedColumns[] = RidePeer::SINGLELINE;
		}

	} // setSingleline()

	/**
	 * Set the value of [description] column.
	 * Description of the ride
	 * @param      string $v new value
	 * @return     void
	 */
	public function setDescription($v)
	{

		// if the passed in parameter is the *same* object that
		// is stored internally then we use the Lob->isModified()
		// method to know whether contents changed.
		if ($v instanceof Lob && $v === $this->description) {
			$changed = $v->isModified();
		} else {
			$changed = ($this->description !== $v);
		}
		if ($changed) {
			if ( !($v instanceof Lob) ) {
				$obj = new Clob();
				$obj->setContents($v);
			} else {
				$obj = $v;
			}
			$this->description = $obj;
			$this->modifiedColumns[] = RidePeer::DESCRIPTION;
		}

	} // setDescription()

	/**
	 * Set the value of [is_ride_permently_closed] column.
	 * Is the ride permently closed
	 * @param      boolean $v new value
	 * @return     void
	 */
	public function setIsRidePermentlyClosed($v)
	{

		if ($this->is_ride_permently_closed !== $v) {
			$this->is_ride_permently_closed = $v;
			$this->modifiedColumns[] = RidePeer::IS_RIDE_PERMENTLY_CLOSED;
		}

	} // setIsRidePermentlyClosed()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->id = $rs->getInt($startcol + 0);

			$this->name = $rs->getString($startcol + 1);

			$this->land_id = $rs->getInt($startcol + 2);

			$this->height = $rs->getInt($startcol + 3);

			$this->popularitylevel = $rs->getInt($startcol + 4);

			$this->currentwaittime = $rs->getInt($startcol + 5);

			$this->fastpass = $rs->getBoolean($startcol + 6);

			$this->averagewaittime = $rs->getInt($startcol + 7);

			$this->nextshortestwaittime = $rs->getInt($startcol + 8);

			$this->nextshortestdatetime = $rs->getTimestamp($startcol + 9, null);

			$this->lastupdate = $rs->getInt($startcol + 10);

			$this->singleline = $rs->getBoolean($startcol + 11);

			$this->description = $rs->getClob($startcol + 12);

			$this->is_ride_permently_closed = $rs->getBoolean($startcol + 13);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = RidePeer::NUM_COLUMNS - RidePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Ride object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RidePeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			RidePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RidePeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aLand !== null) {
				if ($this->aLand->isModified()) {
					$affectedRows += $this->aLand->save($con);
				}
				$this->setLand($this->aLand);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RidePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RidePeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collItineraryRides !== null) {
				foreach($this->collItineraryRides as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRideWaits !== null) {
				foreach($this->collRideWaits as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRideClosures !== null) {
				foreach($this->collRideClosures as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aLand !== null) {
				if (!$this->aLand->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aLand->getValidationFailures());
				}
			}


			if (($retval = RidePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collItineraryRides !== null) {
					foreach($this->collItineraryRides as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRideWaits !== null) {
					foreach($this->collRideWaits as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRideClosures !== null) {
					foreach($this->collRideClosures as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RidePeer::DATABASE_NAME);

		if ($this->isColumnModified(RidePeer::ID)) $criteria->add(RidePeer::ID, $this->id);
		if ($this->isColumnModified(RidePeer::NAME)) $criteria->add(RidePeer::NAME, $this->name);
		if ($this->isColumnModified(RidePeer::LAND_ID)) $criteria->add(RidePeer::LAND_ID, $this->land_id);
		if ($this->isColumnModified(RidePeer::HEIGHT)) $criteria->add(RidePeer::HEIGHT, $this->height);
		if ($this->isColumnModified(RidePeer::POPULARITYLEVEL)) $criteria->add(RidePeer::POPULARITYLEVEL, $this->popularitylevel);
		if ($this->isColumnModified(RidePeer::CURRENTWAITTIME)) $criteria->add(RidePeer::CURRENTWAITTIME, $this->currentwaittime);
		if ($this->isColumnModified(RidePeer::FASTPASS)) $criteria->add(RidePeer::FASTPASS, $this->fastpass);
		if ($this->isColumnModified(RidePeer::AVERAGEWAITTIME)) $criteria->add(RidePeer::AVERAGEWAITTIME, $this->averagewaittime);
		if ($this->isColumnModified(RidePeer::NEXTSHORTESTWAITTIME)) $criteria->add(RidePeer::NEXTSHORTESTWAITTIME, $this->nextshortestwaittime);
		if ($this->isColumnModified(RidePeer::NEXTSHORTESTDATETIME)) $criteria->add(RidePeer::NEXTSHORTESTDATETIME, $this->nextshortestdatetime);
		if ($this->isColumnModified(RidePeer::LASTUPDATE)) $criteria->add(RidePeer::LASTUPDATE, $this->lastupdate);
		if ($this->isColumnModified(RidePeer::SINGLELINE)) $criteria->add(RidePeer::SINGLELINE, $this->singleline);
		if ($this->isColumnModified(RidePeer::DESCRIPTION)) $criteria->add(RidePeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(RidePeer::IS_RIDE_PERMENTLY_CLOSED)) $criteria->add(RidePeer::IS_RIDE_PERMENTLY_CLOSED, $this->is_ride_permently_closed);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RidePeer::DATABASE_NAME);

		$criteria->add(RidePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Ride (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setLandId($this->land_id);

		$copyObj->setHeight($this->height);

		$copyObj->setPopularitylevel($this->popularitylevel);

		$copyObj->setCurrentwaittime($this->currentwaittime);

		$copyObj->setFastpass($this->fastpass);

		$copyObj->setAveragewaittime($this->averagewaittime);

		$copyObj->setNextshortestwaittime($this->nextshortestwaittime);

		$copyObj->setNextshortestdatetime($this->nextshortestdatetime);

		$copyObj->setLastupdate($this->lastupdate);

		$copyObj->setSingleline($this->singleline);

		$copyObj->setDescription($this->description);

		$copyObj->setIsRidePermentlyClosed($this->is_ride_permently_closed);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach($this->getItineraryRides() as $relObj) {
				$copyObj->addItineraryRide($relObj->copy($deepCopy));
			}

			foreach($this->getRideWaits() as $relObj) {
				$copyObj->addRideWait($relObj->copy($deepCopy));
			}

			foreach($this->getRideClosures() as $relObj) {
				$copyObj->addRideClosure($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Ride Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RidePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RidePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Land object.
	 *
	 * @param      Land $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setLand($v)
	{


		if ($v === null) {
			$this->setLandId(NULL);
		} else {
			$this->setLandId($v->getId());
		}


		$this->aLand = $v;
	}


	/**
	 * Get the associated Land object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Land The associated Land object.
	 * @throws     PropelException
	 */
	public function getLand($con = null)
	{
		// include the related Peer class
		include_once 'persistence/om/BaseLandPeer.php';

		if ($this->aLand === null && ($this->land_id !== null)) {

			$this->aLand = LandPeer::retrieveByPK($this->land_id, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = LandPeer::retrieveByPK($this->land_id, $con);
			   $obj->addLands($this);
			 */
		}
		return $this->aLand;
	}

	/**
	 * Temporary storage of collItineraryRides to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initItineraryRides()
	{
		if ($this->collItineraryRides === null) {
			$this->collItineraryRides = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Ride has previously
	 * been saved, it will retrieve related ItineraryRides from storage.
	 * If this Ride is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getItineraryRides($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseItineraryRidePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collItineraryRides === null) {
			if ($this->isNew()) {
			   $this->collItineraryRides = array();
			} else {

				$criteria->add(ItineraryRidePeer::RIDE_ID, $this->getId());

				ItineraryRidePeer::addSelectColumns($criteria);
				$this->collItineraryRides = ItineraryRidePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ItineraryRidePeer::RIDE_ID, $this->getId());

				ItineraryRidePeer::addSelectColumns($criteria);
				if (!isset($this->lastItineraryRideCriteria) || !$this->lastItineraryRideCriteria->equals($criteria)) {
					$this->collItineraryRides = ItineraryRidePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastItineraryRideCriteria = $criteria;
		return $this->collItineraryRides;
	}

	/**
	 * Returns the number of related ItineraryRides.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countItineraryRides($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseItineraryRidePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(ItineraryRidePeer::RIDE_ID, $this->getId());

		return ItineraryRidePeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a ItineraryRide object to this object
	 * through the ItineraryRide foreign key attribute
	 *
	 * @param      ItineraryRide $l ItineraryRide
	 * @return     void
	 * @throws     PropelException
	 */
	public function addItineraryRide(ItineraryRide $l)
	{
		$this->collItineraryRides[] = $l;
		$l->setRide($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Ride is new, it will return
	 * an empty collection; or if this Ride has previously
	 * been saved, it will retrieve related ItineraryRides from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Ride.
	 */
	public function getItineraryRidesJoinItinerary($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseItineraryRidePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collItineraryRides === null) {
			if ($this->isNew()) {
				$this->collItineraryRides = array();
			} else {

				$criteria->add(ItineraryRidePeer::RIDE_ID, $this->getId());

				$this->collItineraryRides = ItineraryRidePeer::doSelectJoinItinerary($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ItineraryRidePeer::RIDE_ID, $this->getId());

			if (!isset($this->lastItineraryRideCriteria) || !$this->lastItineraryRideCriteria->equals($criteria)) {
				$this->collItineraryRides = ItineraryRidePeer::doSelectJoinItinerary($criteria, $con);
			}
		}
		$this->lastItineraryRideCriteria = $criteria;

		return $this->collItineraryRides;
	}

	/**
	 * Temporary storage of collRideWaits to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initRideWaits()
	{
		if ($this->collRideWaits === null) {
			$this->collRideWaits = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Ride has previously
	 * been saved, it will retrieve related RideWaits from storage.
	 * If this Ride is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getRideWaits($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseRideWaitPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRideWaits === null) {
			if ($this->isNew()) {
			   $this->collRideWaits = array();
			} else {

				$criteria->add(RideWaitPeer::RIDE_ID, $this->getId());

				RideWaitPeer::addSelectColumns($criteria);
				$this->collRideWaits = RideWaitPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RideWaitPeer::RIDE_ID, $this->getId());

				RideWaitPeer::addSelectColumns($criteria);
				if (!isset($this->lastRideWaitCriteria) || !$this->lastRideWaitCriteria->equals($criteria)) {
					$this->collRideWaits = RideWaitPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRideWaitCriteria = $criteria;
		return $this->collRideWaits;
	}

	/**
	 * Returns the number of related RideWaits.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countRideWaits($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseRideWaitPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(RideWaitPeer::RIDE_ID, $this->getId());

		return RideWaitPeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a RideWait object to this object
	 * through the RideWait foreign key attribute
	 *
	 * @param      RideWait $l RideWait
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRideWait(RideWait $l)
	{
		$this->collRideWaits[] = $l;
		$l->setRide($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Ride is new, it will return
	 * an empty collection; or if this Ride has previously
	 * been saved, it will retrieve related RideWaits from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Ride.
	 */
	public function getRideWaitsJoinUser($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseRideWaitPeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRideWaits === null) {
			if ($this->isNew()) {
				$this->collRideWaits = array();
			} else {

				$criteria->add(RideWaitPeer::RIDE_ID, $this->getId());

				$this->collRideWaits = RideWaitPeer::doSelectJoinUser($criteria, $con);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RideWaitPeer::RIDE_ID, $this->getId());

			if (!isset($this->lastRideWaitCriteria) || !$this->lastRideWaitCriteria->equals($criteria)) {
				$this->collRideWaits = RideWaitPeer::doSelectJoinUser($criteria, $con);
			}
		}
		$this->lastRideWaitCriteria = $criteria;

		return $this->collRideWaits;
	}

	/**
	 * Temporary storage of collRideClosures to save a possible db hit in
	 * the event objects are add to the collection, but the
	 * complete collection is never requested.
	 * @return     void
	 */
	public function initRideClosures()
	{
		if ($this->collRideClosures === null) {
			$this->collRideClosures = array();
		}
	}

	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Ride has previously
	 * been saved, it will retrieve related RideClosures from storage.
	 * If this Ride is new, it will return
	 * an empty collection or the current collection, the criteria
	 * is ignored on a new object.
	 *
	 * @param      Connection $con
	 * @param      Criteria $criteria
	 * @throws     PropelException
	 */
	public function getRideClosures($criteria = null, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseRideClosurePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRideClosures === null) {
			if ($this->isNew()) {
			   $this->collRideClosures = array();
			} else {

				$criteria->add(RideClosurePeer::RIDE_ID, $this->getId());

				RideClosurePeer::addSelectColumns($criteria);
				$this->collRideClosures = RideClosurePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RideClosurePeer::RIDE_ID, $this->getId());

				RideClosurePeer::addSelectColumns($criteria);
				if (!isset($this->lastRideClosureCriteria) || !$this->lastRideClosureCriteria->equals($criteria)) {
					$this->collRideClosures = RideClosurePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRideClosureCriteria = $criteria;
		return $this->collRideClosures;
	}

	/**
	 * Returns the number of related RideClosures.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      Connection $con
	 * @throws     PropelException
	 */
	public function countRideClosures($criteria = null, $distinct = false, $con = null)
	{
		// include the Peer class
		include_once 'persistence/om/BaseRideClosurePeer.php';
		if ($criteria === null) {
			$criteria = new Criteria();
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		$criteria->add(RideClosurePeer::RIDE_ID, $this->getId());

		return RideClosurePeer::doCount($criteria, $distinct, $con);
	}

	/**
	 * Method called to associate a RideClosure object to this object
	 * through the RideClosure foreign key attribute
	 *
	 * @param      RideClosure $l RideClosure
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRideClosure(RideClosure $l)
	{
		$this->collRideClosures[] = $l;
		$l->setRide($this);
	}

} // BaseRide
