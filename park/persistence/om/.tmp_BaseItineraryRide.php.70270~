<?php

require_once 'propel/om/BaseObject.php';

require_once 'propel/om/Persistent.php';


include_once 'propel/util/Criteria.php';

include_once 'persistence/ItineraryRidePeer.php';

/**
 * Base class that represents a row from the 'itinerary_ride' table.
 *
 * A ride on a itinerary
 *
 * This class was autogenerated by Propel on:
 *
 * Wed May 20 18:37:51 2009
 *
 * @package    persistence.om
 */
abstract class BaseItineraryRide extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ItineraryRidePeer
	 */
	protected static $peer;


	/**
	 * The value for the itinerary_id field.
	 * @var        int
	 */
	protected $itinerary_id;


	/**
	 * The value for the ride_id field.
	 * @var        int
	 */
	protected $ride_id;


	/**
	 * The value for the priority field.
	 * @var        int
	 */
	protected $priority;

	/**
	 * @var        Itinerary
	 */
	protected $aItinerary;

	/**
	 * @var        Ride
	 */
	protected $aRide;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [itinerary_id] column value.
	 * Foreign Key for itinerary
	 * @return     int
	 */
	public function getItineraryId()
	{

		return $this->itinerary_id;
	}

	/**
	 * Get the [ride_id] column value.
	 * Foreign Key for ride
	 * @return     int
	 */
	public function getRideId()
	{

		return $this->ride_id;
	}

	/**
	 * Get the [priority] column value.
	 * priority for the ride
	 * @return     int
	 */
	public function getPriority()
	{

		return $this->priority;
	}

	/**
	 * Set the value of [itinerary_id] column.
	 * Foreign Key for itinerary
	 * @param      int $v new value
	 * @return     void
	 */
	public function setItineraryId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->itinerary_id !== $v) {
			$this->itinerary_id = $v;
			$this->modifiedColumns[] = ItineraryRidePeer::ITINERARY_ID;
		}

		if ($this->aItinerary !== null && $this->aItinerary->getId() !== $v) {
			$this->aItinerary = null;
		}

	} // setItineraryId()

	/**
	 * Set the value of [ride_id] column.
	 * Foreign Key for ride
	 * @param      int $v new value
	 * @return     void
	 */
	public function setRideId($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->ride_id !== $v) {
			$this->ride_id = $v;
			$this->modifiedColumns[] = ItineraryRidePeer::RIDE_ID;
		}

		if ($this->aRide !== null && $this->aRide->getId() !== $v) {
			$this->aRide = null;
		}

	} // setRideId()

	/**
	 * Set the value of [priority] column.
	 * priority for the ride
	 * @param      int $v new value
	 * @return     void
	 */
	public function setPriority($v)
	{

		// Since the native PHP type for this column is integer,
		// we will cast the input value to an int (if it is not).
		if ($v !== null && !is_int($v) && is_numeric($v)) {
			$v = (int) $v;
		}

		if ($this->priority !== $v) {
			$this->priority = $v;
			$this->modifiedColumns[] = ItineraryRidePeer::PRIORITY;
		}

	} // setPriority()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (1-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      ResultSet $rs The ResultSet class with cursor advanced to desired record pos.
	 * @param      int $startcol 1-based offset column which indicates which restultset column to start with.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate(ResultSet $rs, $startcol = 1)
	{
		try {

			$this->itinerary_id = $rs->getInt($startcol + 0);

			$this->ride_id = $rs->getInt($startcol + 1);

			$this->priority = $rs->getInt($startcol + 2);

			$this->resetModified();

			$this->setNew(false);

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 3; // 3 = ItineraryRidePeer::NUM_COLUMNS - ItineraryRidePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ItineraryRide object", $e);
		}
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      Connection $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ItineraryRidePeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			ItineraryRidePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.  If the object is new,
	 * it inserts it; otherwise an update is performed.  This method
	 * wraps the doSave() worker method in a transaction.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save($con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ItineraryRidePeer::DATABASE_NAME);
		}

		try {
			$con->begin();
			$affectedRows = $this->doSave($con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollback();
			throw $e;
		}
	}

	/**
	 * Stores the object in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      Connection $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave($con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aItinerary !== null) {
				if ($this->aItinerary->isModified()) {
					$affectedRows += $this->aItinerary->save($con);
				}
				$this->setItinerary($this->aItinerary);
			}

			if ($this->aRide !== null) {
				if ($this->aRide->isModified()) {
					$affectedRows += $this->aRide->save($con);
				}
				$this->setRide($this->aRide);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ItineraryRidePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += ItineraryRidePeer::doUpdate($this, $con);
				}
				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;
		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aItinerary !== null) {
				if (!$this->aItinerary->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aItinerary->getValidationFailures());
				}
			}

			if ($this->aRide !== null) {
				if (!$this->aRide->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRide->getValidationFailures());
				}
			}


			if (($retval = ItineraryRidePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ItineraryRidePeer::DATABASE_NAME);

		if ($this->isColumnModified(ItineraryRidePeer::ITINERARY_ID)) $criteria->add(ItineraryRidePeer::ITINERARY_ID, $this->itinerary_id);
		if ($this->isColumnModified(ItineraryRidePeer::RIDE_ID)) $criteria->add(ItineraryRidePeer::RIDE_ID, $this->ride_id);
		if ($this->isColumnModified(ItineraryRidePeer::PRIORITY)) $criteria->add(ItineraryRidePeer::PRIORITY, $this->priority);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ItineraryRidePeer::DATABASE_NAME);

		$criteria->add(ItineraryRidePeer::ITINERARY_ID, $this->itinerary_id);
		$criteria->add(ItineraryRidePeer::RIDE_ID, $this->ride_id);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getItineraryId();

		$pks[1] = $this->getRideId();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setItineraryId($keys[0]);

		$this->setRideId($keys[1]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ItineraryRide (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPriority($this->priority);


		$copyObj->setNew(true);

		$copyObj->setItineraryId(NULL); // this is a pkey column, so set to default value

		$copyObj->setRideId(NULL); // this is a pkey column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ItineraryRide Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ItineraryRidePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ItineraryRidePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Itinerary object.
	 *
	 * @param      Itinerary $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setItinerary($v)
	{


		if ($v === null) {
			$this->setItineraryId(NULL);
		} else {
			$this->setItineraryId($v->getId());
		}


		$this->aItinerary = $v;
	}


	/**
	 * Get the associated Itinerary object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Itinerary The associated Itinerary object.
	 * @throws     PropelException
	 */
	public function getItinerary($con = null)
	{
		// include the related Peer class
		include_once 'persistence/om/BaseItineraryPeer.php';

		if ($this->aItinerary === null && ($this->itinerary_id !== null)) {

			$this->aItinerary = ItineraryPeer::retrieveByPK($this->itinerary_id, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = ItineraryPeer::retrieveByPK($this->itinerary_id, $con);
			   $obj->addItinerarys($this);
			 */
		}
		return $this->aItinerary;
	}

	/**
	 * Declares an association between this object and a Ride object.
	 *
	 * @param      Ride $v
	 * @return     void
	 * @throws     PropelException
	 */
	public function setRide($v)
	{


		if ($v === null) {
			$this->setRideId(NULL);
		} else {
			$this->setRideId($v->getId());
		}


		$this->aRide = $v;
	}


	/**
	 * Get the associated Ride object
	 *
	 * @param      Connection Optional Connection object.
	 * @return     Ride The associated Ride object.
	 * @throws     PropelException
	 */
	public function getRide($con = null)
	{
		// include the related Peer class
		include_once 'persistence/om/BaseRidePeer.php';

		if ($this->aRide === null && ($this->ride_id !== null)) {

			$this->aRide = RidePeer::retrieveByPK($this->ride_id, $con);

			/* The following can be used instead of the line above to
			   guarantee the related object contains a reference
			   to this object, but this level of coupling
			   may be undesirable in many circumstances.
			   As it can lead to a db query with many results that may
			   never be used.
			   $obj = RidePeer::retrieveByPK($this->ride_id, $con);
			   $obj->addRides($this);
			 */
		}
		return $this->aRide;
	}

} // BaseItineraryRide
